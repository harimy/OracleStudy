SELECT USER
FROM DUAL;
--==>> HR

--■■■ 팀별 실습 과제 ■■■--

-- HR 샘플 스키마 ERD 를 이용한 테이블 재구성~!!!

-- 팀별로... HR 스키마에 있는 기본 테이블(7개)
-- COUNTRIES / DEPARTMENTS / EMPLOYEES / JOBS / JOB_HISTORY	/ LOCATIONS	/ REGIONS
-- 을 똑같이 새로 구성한다.

-- 단, 생성하는 테이블 이름은 『테이블명+팀번호』
-- COUNTRIES04 / DEPARTMENTS04 / EMPLOYEES04 / JOBS04 / JOB_HISTORY04 / LOCATIONS04 / REGIONS04
-- 과 같이 구성한다. 


-- 1. 기존 테이블의 정보 수집
-- 2. 테이블 생성(컬럼 이름, 자료형, DEFAULT 표현식, NOT NULL 등...)
--    제약조건 설정(PK, UK, FK, CK, ... NN)
-- 3. 작성 후 데이터 입력
-- 4. 제출 항목
--    - 20210406_03_HR_팀별실습과제_4조.sql
--    - 후기_4조.txt
-- 5. 제출 기한
--    금일 오후 17:40 까지



--------------------------------------------------------------------------------
-- 데이터 분석

SELECT *
FROM TAB;

SELECT *
FROM COUNTRIES;
--==>>
/*
COUNTRY_ID	
COUNTRY_NAME	
REGION_ID
*/

SELECT *
FROM DEPARTMENTS;
--==>> 
/*
DEPARTMENT_ID	
DEPARTMENT_NAME	
MANAGER_ID	
LOCATION_ID
*/

SELECT *
FROM EMPLOYEES;
--==>>
/*
EMPLOYEE_ID	
FIRST_NAME	
LAST_NAME	
EMAIL	
PHONE_NUMBER	
HIRE_DATE	
JOB_ID	
SALARY	
COMMISSION_PCT	
MANAGER_ID	
DEPARTMENT_ID
*/

SELECT *
FROM JOBS;

DESC JOBS;
--==>>
/*
JOB_ID	
JOB_TITLE	
MIN_SALARY	
MAX_SALARY
*/

SELECT *
FROM JOB_HISTORY;
--==>>
/*
EMPLOYEE_ID	
START_DATE	
END_DATE	
JOB_ID	
DEPARTMENT_ID
*/

SELECT *
FROM LOCATIONS;
--==>>
/*
LOCATION_ID	
STREET_ADDRESS	            
POSTAL_CODE	CITY	
STATE_PROVINCE	
COUNTRY_ID
*/

SELECT *
FROM REGIONS;
--==>>
/*
REGION_ID	
REGION_NAME
*/


SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME IN ('COUNTRIES', 'DEPARTMENTS', 'EMPLOYEES', 'JOBS', 'JOB_HISTORY', 'LOCATIONS', 'REGIONS');
--==>>
/*
OWNER	CONSTRAINT_NAME	        TABLE_NAME	CONSTRAINT_TYPE	    COLUMN_NAME	    SEARCH_CONDITION	            DELETE_RULE
HR	    COUNTRY_ID_NN	        COUNTRIES	C	                COUNTRY_ID	    "COUNTRY_ID" IS NOT NULL	
HR	    COUNTRY_C_ID_PK	        COUNTRIES	P	                COUNTRY_ID		
HR	    COUNTR_REG_FK	        COUNTRIES	R	                REGION_ID		                                NO ACTION

HR	    DEPT_NAME_NN	        DEPARTMENTS	C	                DEPARTMENT_NAME	"DEPARTMENT_NAME" IS NOT NULL	
HR	    DEPT_ID_PK	            DEPARTMENTS	P	                DEPARTMENT_ID		
HR	    DEPT_LOC_FK	            DEPARTMENTS	R	                LOCATION_ID		                                NO ACTION
HR	    DEPT_MGR_FK	            DEPARTMENTS	R	                MANAGER_ID		                                NO ACTION

HR	    EMP_LAST_NAME_NN	    EMPLOYEES	C	                LAST_NAME	    "LAST_NAME" IS NOT NULL	
HR	    EMP_EMAIL_NN	        EMPLOYEES	C	                EMAIL	        "EMAIL" IS NOT NULL	
HR	    EMP_HIRE_DATE_NN	    EMPLOYEES	C	                HIRE_DATE	    "HIRE_DATE" IS NOT NULL	
HR	    EMP_JOB_NN	            EMPLOYEES	C	                JOB_ID	        "JOB_ID" IS NOT NULL	
HR	    EMP_SALARY_MIN	        EMPLOYEES	C	                SALARY	        salary > 0	
HR	    EMP_EMAIL_UK	        EMPLOYEES	U	                EMAIL		
HR	    EMP_EMP_ID_PK	        EMPLOYEES	P	                EMPLOYEE_ID		
HR	    EMP_DEPT_FK	            EMPLOYEES	R	                DEPARTMENT_ID		                            NO ACTION
HR	    EMP_JOB_FK	            EMPLOYEES	R	                JOB_ID		                                    NO ACTION
HR	    EMP_MANAGER_FK	        EMPLOYEES	R	                MANAGER_ID		                                NO ACTION

HR	    JOB_TITLE_NN	        JOBS	C	                    JOB_TITLE	    "JOB_TITLE" IS NOT NULL	
HR	    JOB_ID_PK	            JOBS	P	                    JOB_ID		

HR	    JHIST_EMPLOYEE_NN	    JOB_HISTORY	C	                EMPLOYEE_ID	    "EMPLOYEE_ID" IS NOT NULL	
HR	    JHIST_START_DATE_NN	    JOB_HISTORY	C	                START_DATE	    "START_DATE" IS NOT NULL	
HR	    JHIST_END_DATE_NN	    JOB_HISTORY	C	                END_DATE	    "END_DATE" IS NOT NULL	
HR	    JHIST_JOB_NN	        JOB_HISTORY	C	                JOB_ID	        "JOB_ID" IS NOT NULL	
HR	    JHIST_DATE_INTERVAL	    JOB_HISTORY	C	                START_DATE	    end_date > start_date	
HR	    JHIST_DATE_INTERVAL	    JOB_HISTORY	C	                END_DATE	    end_date > start_date	
HR	    JHIST_EMP_ID_ST_DATE_PK	JOB_HISTORY	P	                EMPLOYEE_ID		
HR	    JHIST_EMP_ID_ST_DATE_PK	JOB_HISTORY	P	                START_DATE		
HR	    JHIST_JOB_FK	        JOB_HISTORY	R	                JOB_ID		                                    NO ACTION
HR	    JHIST_EMP_FK	        JOB_HISTORY	R	                EMPLOYEE_ID		                                NO ACTION
HR	    JHIST_DEPT_FK	        JOB_HISTORY	R	                DEPARTMENT_ID		                            NO ACTION

HR	    LOC_CITY_NN	            LOCATIONS	C	                CITY	        "CITY" IS NOT NULL	
HR	    LOC_ID_PK	            LOCATIONS	P	                LOCATION_ID		
HR	    LOC_C_ID_FK	            LOCATIONS	R	                COUNTRY_ID		                                NO ACTION

HR	    REGION_ID_NN	        REGIONS	    C	                REGION_ID	    "REGION_ID" IS NOT NULL	
HR	    REG_ID_PK	            REGIONS	    P	                REGION_ID		
*/

--------------------------------------------------------------------------------

-- REGIONS04 테이블 생성
DESC REGIONS;

CREATE TABLE REGIONS04
( REGION_ID     NUMBER          
, REGION_NAME   VARCHAR2(25)
, CONSTRAINT REG04_ID_PK PRIMARY KEY(REGION_ID)
, CONSTRAINT REGION04_ID_NN CHECK(REGION_ID IS NOT NULL)
);

DROP TABLE REGIONS04;

DESC REGIONS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='REGIONS';



-- COUNTRIES04 테이블 생성
CREATE TABLE COUNTRIES04
( COUNTRY_ID    CHAR(2)
, COUNTRY_NAME  VARCHAR2(40)
, REGION_ID     NUMBER
, CONSTRAINT COUNTRY04_C_ID_PK PRIMARY KEY(COUNTRY_ID)
, CONSTRAINT COUNTRY04_ID_NN CHECK(COUNTRY_ID IS NOT NULL)
, CONSTRAINT COUNTR04_REG_FK FOREIGN KEY(REGION_ID)
             REFERENCES REGIONS04(REGION_ID)        
);

DROP TABLE COUNTRIES04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='COUNTRIES';
--==>>
/*
HR	COUNTRY_ID_NN	COUNTRIES	C	COUNTRY_ID	    "COUNTRY_ID" IS NOT NULL	
HR	COUNTRY_C_ID_PK	COUNTRIES	P	COUNTRY_ID		
HR	COUNTR_REG_FK	COUNTRIES	R	REGION_ID		                            NO ACTION
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='COUNTRIES04';
--==>>
/*
HR	COUNTRY04_ID_NN	    COUNTRIES04	C	COUNTRY_ID	COUNTRY_ID IS NOT NULL	
HR	COUNTRY04_C_ID_PK	COUNTRIES04	P	COUNTRY_ID		
HR	COUNTR04_REG_FK	    COUNTRIES04	R	REGION_ID		                        NO ACTION
*/



-- LOCATIONS04 테이블 생성
SELECT *
FROM LOCATIONS;
--23
--LOCATION_ID, STREET_ADDRESS, POSTAL_CODE, CITY, STATE_PROVINCE, COUNTRY_ID

DESC LOCATIONS;


CREATE TABLE LOCATIONS04
( LOCATION_ID       NUMBER(4)
, STREET_ADDRESS    VARCHAR2(40)
, POSTAL_CODE       VARCHAR2(12)
, CITY              VARCHAR2(30)
, STATE_PROVINCE    VARCHAR2(25)
, COUNTRY_ID        CHAR(2)
, CONSTRAINT LOC04_ID_PK PRIMARY KEY(LOCATION_ID)
, CONSTRAINT LOC04_C_ID_FK FOREIGN KEY(COUNTRY_ID)
             REFERENCES COUNTRIES04(COUNTRY_ID)
);

ALTER TABLE LOCATIONS04
ADD (CONSTRAINT LOC04_CITY_NN CHECK(CITY IS NOT NULL) );

DROP TABLE LOCATIONS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='LOCATIONS';
--==>>
/*
HR	LOC_CITY_NN	LOCATIONS	C	CITY	        "CITY" IS NOT NULL	
HR	LOC_ID_PK	LOCATIONS	P	LOCATION_ID		
HR	LOC_C_ID_FK	LOCATIONS	R	COUNTRY_ID		                          NO ACTION
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='LOCATIONS04';
--==>>
/*
HR	LOC04_ID_PK	    LOCATIONS04	P	LOCATION_ID		
HR	LOC04_C_ID_FK	LOCATIONS04	R	COUNTRY_ID		                      NO ACTION
HR	LOC04_CITY_NN	LOCATIONS04	C	CITY	    CITY IS NOT NULL	
*/


-- JOBS04 테이블 생성 
CREATE TABLE JOBS04
( JOB_ID        VARCHAR2(10)
, JOB_TITLE     VARCHAR2(35) CONSTRAINT JOB04_TITLE_NN NOT NULL
, MIN_SALARY    NUMBER(6)
, MAX_SALARY    NUMBER(6)
, CONSTRAINT JOB04_ID_PK PRIMARY KEY(JOB_ID)
);

DROP TABLE JOBS04;

DESC JOBS;
DESC JOBS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='JOBS';
--==>>
/*
HR	JOB_TITLE_NN	JOBS	C	JOB_TITLE	"JOB_TITLE" IS NOT NULL	
HR	JOB_ID_PK	    JOBS	P	JOB_ID		
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='JOBS04';
--==>>
/*
HR	JOB04_TITLE_NN	JOBS04	C	JOB_TITLE	"JOB_TITLE" IS NOT NULL	
HR	JOB04_ID_PK	    JOBS04	P	JOB_ID			
*/


-- DEPARTMENTS04 테이블 생성 
CREATE TABLE DEPARTMENTS04
( DEPARTMENT_ID     NUMBER(4)         
, DEPARTMENT_NAME   VARCHAR2(30)    CONSTRAINT DEPT04_NAME_NN NOT NULL
, MANAGER_ID        NUMBER(6)
, LOCATION_ID       NUMBER(4)
, CONSTRAINT DEPT04_ID_PK PRIMARY KEY(DEPARTMENT_ID)
, CONSTRAINT DEPT04_LOC_FK FOREIGN KEY(LOCATION_ID)
                           REFERENCES LOCATIONS04(LOCATION_ID)
);
ALTER TABLE DEPARTMENTS04
ADD (CONSTRAINT DEPT04_MGR_FK FOREIGN KEY(MANAGER_ID)
                            REFERENCES EMPLOYEES04(EMPLOYEE_ID));
                                                    
ALTER TABLE DEPARTMENTS04
DROP CONSTRAINT DEPT04_MGR_FK;

DROP TABLE DEPARTMENTS04;

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='DEPARTMENTS';
--==>>
/*
HR	DEPT_NAME_NN	DEPARTMENTS	C	DEPARTMENT_NAME	"DEPARTMENT_NAME" IS NOT NULL	
HR	DEPT_ID_PK	    DEPARTMENTS	P	DEPARTMENT_ID		
HR	DEPT_LOC_FK	    DEPARTMENTS	R	LOCATION_ID		                                NO ACTION
HR	DEPT_MGR_FK	    DEPARTMENTS	R	MANAGER_ID		                                NO ACTION
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='DEPARTMENTS04';
--==>>
/*
HR	DEPT04_MGR_FK	DEPARTMENTS04	R	MANAGER_ID		                                NO ACTION
HR	DEPT04_NAME_NN	DEPARTMENTS04	C	DEPARTMENT_NAME	"DEPARTMENT_NAME" IS NOT NULL	
HR	DEPT04_ID_PK	DEPARTMENTS04	P	DEPARTMENT_ID		
HR	DEPT04_LOC_FK	DEPARTMENTS04	R	LOCATION_ID		                                NO ACTION
*/

DESC DEPARTMENTS;
DESC DEPARTMENTS04;





-- EMPLOYEES04 테이블 생성 
SELECT *
FROM EMPLOYEES;

SELECT *
FROM DEPARTMENTS;

CREATE TABLE EMPLOYEES04
( EMPLOYEE_ID       NUMBER(6)         
, FIRST_NAME        VARCHAR2(20)
, LAST_NAME         VARCHAR2(25) CONSTRAINT EMP04_LAST_NAME_NN NOT NULL
, EMAIL             VARCHAR2(25) CONSTRAINT EMP04_EMAIL_NN NOT NULL
, PHONE_NUMBER      VARCHAR2(20) 
, HIRE_DATE         DATE        CONSTRAINT EMP04_HIRE_DATE_NN NOT NULL
, JOB_ID            VARCHAR2(10) CONSTRAINT EMP04_JOB_NN NOT NULL
, SALARY            NUMBER(8,2)  
, COMMISSION_PCT    NUMBER(2,2)
, MANAGER_ID        NUMBER(6) 
, DEPARTMENT_ID     NUMBER(4)
, CONSTRAINT EMP04_EMP_ID_PK PRIMARY KEY(EMPLOYEE_ID)
, CONSTRAINT EMP04_EMAIL_UK UNIQUE(EMAIL)
, CONSTRAINT EMP04_JOB_FK FOREIGN KEY(JOB_ID)
                          REFERENCES JOBS(JOB_ID)
, CONSTRAINT EMP04_SALARY_MIN CHECK(SALARY > 0)
, CONSTRAINT EMP04_MANAGER_FK FOREIGN KEY(MANAGER_ID)
                          REFERENCES EMPLOYEES04(EMPLOYEE_ID)
, CONSTRAINT EMP04_DEPT_FK FOREIGN KEY(DEPARTMENT_ID)
                          REFERENCES DEPARTMENTS04(DEPARTMENT_ID)
);


DROP TABLE EMPLOYEES04;

DESC EMPLOYEES;
--==>>
/*
이름             널?       유형           
-------------- -------- ------------ 
EMPLOYEE_ID    NOT NULL NUMBER(6)    
FIRST_NAME              VARCHAR2(20) 
LAST_NAME      NOT NULL VARCHAR2(25) 
EMAIL          NOT NULL VARCHAR2(25) 
PHONE_NUMBER            VARCHAR2(20) 
HIRE_DATE      NOT NULL DATE         
JOB_ID         NOT NULL VARCHAR2(10) 
SALARY                  NUMBER(8,2)  
COMMISSION_PCT          NUMBER(2,2)  
MANAGER_ID              NUMBER(6)    
DEPARTMENT_ID           NUMBER(4)
*/

DESC EMPLOYEES04;
--==>>
/*
이름             널?       유형           
-------------- -------- ------------ 
EMPLOYEE_ID    NOT NULL NUMBER(6)    
FIRST_NAME              VARCHAR2(20) 
LAST_NAME      NOT NULL VARCHAR2(25) 
EMAIL          NOT NULL VARCHAR2(25) 
PHONE_NUMBER            VARCHAR2(20) 
HIRE_DATE      NOT NULL VARCHAR2(20) 
JOB_ID         NOT NULL VARCHAR2(10) 
SALARY                  NUMBER(8,2)  
COMMISSION_PCT          NUMBER(2,2)  
MANAGER_ID              NUMBER(6)    
DEPARTMENT_ID           NUMBER(4)    
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='EMPLOYEES';
--==>>
/*
HR	EMP_LAST_NAME_NN	EMPLOYEES	C	LAST_NAME	"LAST_NAME" IS NOT NULL	
HR	EMP_EMAIL_NN	    EMPLOYEES	C	EMAIL	"EMAIL" IS NOT NULL	
HR	EMP_HIRE_DATE_NN	EMPLOYEES	C	HIRE_DATE	"HIRE_DATE" IS NOT NULL	
HR	EMP_JOB_NN	        EMPLOYEES	C	JOB_ID	"JOB_ID" IS NOT NULL	
HR	EMP_SALARY_MIN	    EMPLOYEES	C	SALARY	salary > 0	
HR	EMP_EMAIL_UK	    EMPLOYEES	U	EMAIL		
HR	EMP_EMP_ID_PK	    EMPLOYEES	P	EMPLOYEE_ID		
HR	EMP_DEPT_FK	        EMPLOYEES	R	DEPARTMENT_ID		                NO ACTION
HR	EMP_JOB_FK	        EMPLOYEES	R	JOB_ID		                        NO ACTION
HR	EMP_MANAGER_FK	    EMPLOYEES	R	MANAGER_ID		                    NO ACTION
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='EMPLOYEES04';
--==>>
/*
HR	EMP04_LAST_NAME_NN	EMPLOYEES04	C	LAST_NAME	"LAST_NAME" IS NOT NULL	
HR	EMP04_EMAIL_NN	    EMPLOYEES04	C	EMAIL	    "EMAIL" IS NOT NULL	
HR	EMP04_HIRE_DATE_NN	EMPLOYEES04	C	HIRE_DATE	"HIRE_DATE" IS NOT NULL	
HR	EMP04_JOB_NN	    EMPLOYEES04	C	JOB_ID	    "JOB_ID" IS NOT NULL	
HR	EMP04_SALARY_MIN	EMPLOYEES04	C	SALARY	     SALARY > 0	
HR	EMP04_EMP_ID_PK	    EMPLOYEES04	P	EMPLOYEE_ID		
HR	EMP04_EMAIL_UK	    EMPLOYEES04	U	EMAIL		
HR	EMP04_JOB_FK	    EMPLOYEES04	R	JOB_ID		                        NO ACTION
HR	EMP04_MANAGER_FK	EMPLOYEES04	R	MANAGER_ID		                    NO ACTION
HR	EMP04_DEPT_FK	    EMPLOYEES04	R	DEPARTMENT_ID		                NO ACTION
*/

SELECT MANAGER_ID; 
FROM EMPLOYEES04;


-- JOB_HISTORY04 테이블
CREATE TABLE JOB_HISTORY04
( EMPLOYEE_ID   NUMBER(6)       CONSTRAINT JHIST04_EMPLOYEE_NN NOT NULL
, START_DATE    DATE            CONSTRAINT JHIST04_START_DATE_NN NOT NULL
, END_DATE      DATE            CONSTRAINT JHIST04_END_DATE_NN NOT NULL
, JOB_ID        VARCHAR2(10)    CONSTRAINT JHIST04_JOB_NN NOT NULL
, DEPARTMENT_ID NUMBER(4)
, CONSTRAINT JHIST04_EMP_ID_ST_DATE_PK PRIMARY KEY(EMPLOYEE_ID, START_DATE)
, CONSTRAINT JHIST04_DATE_INTERVAL CHECK(END_DATE > START_DATE)
, CONSTRAINT JHIST04_JOB_FK FOREIGN KEY(JOB_ID)
             REFERENCES JOBS04 (JOB_ID)
, CONSTRAINT JHIST04_EMP_FK FOREIGN KEY(EMPLOYEE_ID)
             REFERENCES EMPLOYEES04 (EMPLOYEE_ID)
, CONSTRAINT JHIST04_DEPT_FK FOREIGN KEY(DEPARTMENT_ID)
             REFERENCES DEPARTMENTS04 (DEPARTMENT_ID)    
);

DROP TABLE JOB_HISTORY04;

DESC JOB_HISTORY;
--==>>
/*
이름            널?       유형           
------------- -------- ------------ 
EMPLOYEE_ID   NOT NULL NUMBER(6)    
START_DATE    NOT NULL DATE         
END_DATE      NOT NULL DATE         
JOB_ID        NOT NULL VARCHAR2(10) 
DEPARTMENT_ID          NUMBER(4)
*/
DESC JOB_HISTORY04;
--==>>
/*
이름            널?       유형           
------------- -------- ------------ 
EMPLOYEE_ID   NOT NULL NUMBER(6)    
START_DATE    NOT NULL DATE         
END_DATE      NOT NULL DATE         
JOB_ID        NOT NULL VARCHAR2(10) 
DEPARTMENT_ID          NUMBER(4) 
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='JOB_HISTORY';
--==>>
/*
HR	JHIST_EMPLOYEE_NN	    JOB_HISTORY	C	EMPLOYEE_ID	"EMPLOYEE_ID" IS NOT NULL	
HR	JHIST_START_DATE_NN	    JOB_HISTORY	C	START_DATE	"START_DATE" IS NOT NULL	
HR	JHIST_END_DATE_NN	    JOB_HISTORY	C	END_DATE	"END_DATE" IS NOT NULL	
HR	JHIST_JOB_NN	        JOB_HISTORY	C	JOB_ID	    "JOB_ID" IS NOT NULL	
HR	JHIST_DATE_INTERVAL	    JOB_HISTORY	C	START_DATE	end_date > start_date	
HR	JHIST_DATE_INTERVAL	    JOB_HISTORY	C	END_DATE	end_date > start_date	
HR	JHIST_EMP_ID_ST_DATE_PK	JOB_HISTORY	P	EMPLOYEE_ID		
HR	JHIST_EMP_ID_ST_DATE_PK	JOB_HISTORY	P	START_DATE		
HR	JHIST_JOB_FK	        JOB_HISTORY	R	JOB_ID		                        NO ACTION
HR	JHIST_EMP_FK	        JOB_HISTORY	R	EMPLOYEE_ID		                    NO ACTION
HR	JHIST_DEPT_FK	        JOB_HISTORY	R	DEPARTMENT_ID		                NO ACTION
*/

SELECT *
FROM VIEW_CONSTCHECK
WHERE TABLE_NAME ='JOB_HISTORY04';
--==>>
/*
HR	JHIST04_EMPLOYEE_NN	        JOB_HISTORY04	C	EMPLOYEE_ID	"EMPLOYEE_ID" IS NOT NULL	
HR	JHIST04_START_DATE_NN	    JOB_HISTORY04	C	START_DATE	"START_DATE" IS NOT NULL	
HR	JHIST04_END_DATE_NN	        JOB_HISTORY04	C	END_DATE	"END_DATE" IS NOT NULL	
HR	JHIST04_JOB_NN	            JOB_HISTORY04	C	JOB_ID	    "JOB_ID" IS NOT NULL	
HR	JHIST04_DATE_INTERVAL	    JOB_HISTORY04	C	START_DATE	END_DATE > START_DATE	
HR	JHIST04_DATE_INTERVAL	    JOB_HISTORY04	C	END_DATE	END_DATE > START_DATE	
HR	JHIST04_EMP_ID_ST_DATE_PK	JOB_HISTORY04	P	EMPLOYEE_ID		
HR	JHIST04_EMP_ID_ST_DATE_PK	JOB_HISTORY04	P	START_DATE		
HR	JHIST04_JOB_FK	            JOB_HISTORY04	R	JOB_ID		                        NO ACTION
HR	JHIST04_EMP_FK	            JOB_HISTORY04	R	EMPLOYEE_ID		                    NO ACTION
HR	JHIST04_DEPT_FK	            JOB_HISTORY04	R	DEPARTMENT_ID		                NO ACTION
*/


SELECT *
FROM TAB;

-- 테이블 삭제 기록 지우기 BIN$
-- https://jhbench.tistory.com/268
SHOW RECYCLEBIN;
PURGE RECYCLEBIN;






