SELECT USER
FROM DUAL;
--==>> SCOTT


--○ TBL_JUMUNBACKUP 테이블과 TBL_JUMUN 테이블에서
--   제품코드와 주문량의 값이 똑같은 행의 정보를
--   주문번호, 제품코드, 주문수량, 주문일자 항목으로 조회한다.

-- 내가 풀이한 내용
SELECT T1.JUNO, T1.JECODE, T1.JUSU, T1.JUDAY
FROM 
(
    SELECT *
    FROM TBL_JUMUNBACKUP
    UNION ALL
    SELECT *
    FROM TBL_JUMUN
) T1, 
(
    SELECT JECODE, JUSU
    FROM TBL_JUMUNBACKUP
    INTERSECT
    SELECT JECODE, JUSU
    FROM TBL_JUMUN
) T2
WHERE T1.JECODE = T2.JECODE
  AND T1.JUSU = T2.JUSU;
  

-- 함께 풀이한 내용

-- 방법 1.
SELECT JECODE, JUSU
FROM TBL_JUMUNBACKUP
INTERSECT
SELECT JECODE, JUSU
FROM TBL_JUMUN;
--==>>
/*
꼬북칩	30
와클		10
칸쵸		20
포카칩	40
홈런볼	50
*/

SELECT JUNO, JECODE, JUSU, JUDAY
FROM TBL_JUMUNBACKUP
INTERSECT
SELECT JUNO, JECODE, JUSU, JUDAY
FROM TBL_JUMUN;
--==>> 조회된 결과 없음

ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
--==>> Session이(가) 변경되었습니다.

SELECT T2.JUNO "주문번호", T1.JECODE "제품코드", T1.JUSU "주문수량", T2.JUDAY "주문일자"
FROM
(
    SELECT JECODE, JUSU
    FROM TBL_JUMUNBACKUP
    INTERSECT
    SELECT JECODE, JUSU
    FROM TBL_JUMUN
) T1
JOIN
(
    SELECT JUNO, JECODE, JUSU, JUDAY
    FROM TBL_JUMUNBACKUP
    UNION ALL
    SELECT JUNO, JECODE, JUSU, JUDAY
    FROM TBL_JUMUN
) T2
ON T1.JECODE = T2.JECODE
   AND T1.JUSU = T2.JUSU;
--==>>
/*
2		와클		10	2001-11-01 09:23:27
3		꼬북칩	30	2001-11-01 11:41:00
5		홈런볼	50	2001-11-03 15:50:00
8		포카칩	40	2001-11-10 09:41:14
10		칸쵸		20	2001-11-20 14:17:00
938767	와클		10	2021-04-01 14:25:15
938768	홈런볼	50	2021-04-01 14:25:31
938769	꼬북칩	30	2021-04-01 14:26:58
938772	포카칩	40	2021-04-01 14:28:42
938774	칸쵸		20	2021-04-01 14:28:42
*/


-- 방법 2.
SELECT *
FROM
(
	SELECT JUNO, JECODE, JUSU, JUDAY
	FROM TBL_JUMUNBACKUP
	UNION ALL
	SELECT JUNO, JECODE, JUSU, JUDAY
	FROM TBL_JUMUN
) T
WHERE JECODE IN ('와클', '꼬북칩', '홈런볼', '포카칩', '칸쵸')
  AND JUSU IN (10, 30, 50, 40, 20);

SELECT *
FROM
(
	SELECT JUNO, JECODE, JUSU, JUDAY
	FROM TBL_JUMUNBACKUP
	UNION ALL
	SELECT JUNO, JECODE, JUSU, JUDAY
	FROM TBL_JUMUN
) T
--WHERE JECODE || JUSU IN ('와클10', '꼬북칩30', '홈런볼50', '포카칩40', '칸쵸20')
--WHERE CONCAT(JECODE, JUSU) IN ('와클10', '꼬북칩30', '홈런볼50', '포카칩40', '칸쵸20');
WHERE CONCAT(JECODE, JUSU) = ANY ('와클10', '꼬북칩30', '홈런볼50', '포카칩40', '칸쵸20');

SELECT *
FROM
(
	SELECT JUNO, JECODE, JUSU, JUDAY
	FROM TBL_JUMUNBACKUP
	UNION ALL
	SELECT JUNO, JECODE, JUSU, JUDAY
	FROM TBL_JUMUN
) T
--WHERE JECODE || JUSU IN ('와클10', '꼬북칩30', '홈런볼50', '포카칩40', '칸쵸20')
--WHERE CONCAT(JECODE, JUSU) IN ('와클10', '꼬북칩30', '홈런볼50', '포카칩40', '칸쵸20');
WHERE CONCAT(JECODE, JUSU) = ANY(SELECT CONCAT(JECODE, JUSU)
							  FROM TBL_JUMUNBACKUP
							  INTERSECT
						      SELECT CONCAT(JECODE, JUSU)
							  FROM TBL_JUMUN);
--==>>
/*
2		와클		10	2001-11-01 09:23:27
3		꼬북칩	30	2001-11-01 11:41:00
5		홈런볼	50	2001-11-03 15:50:00
8		포카칩	40	2001-11-10 09:41:14
10		칸쵸		20	2001-11-20 14:17:00
938767	와클		10	2021-04-01 14:25:15
938768	홈런볼	50	2021-04-01 14:25:31
938769	꼬북칩	30	2021-04-01 14:26:58
938772	포카칩	40	2021-04-01 14:28:42
938774	칸쵸		20	2021-04-01 14:28:42
*/


-- MINUS : 차집합
SELECT JECODE, JUSU
FROM TBL_JUMUNBACKUP
INTERSECT
SELECT JECODE, JUSU
FROM TBL_JUMUN;
--==>>
/*
꼬북칩	30
와클		10
칸쵸		20
포카칩	40
홈런볼	50
*/

SELECT JECODE, JUSU
FROM TBL_JUMUNBACKUP
MINUS
SELECT JECODE, JUSU
FROM TBL_JUMUN;
--==>>
/*
감자칩	20
눈을감자	10
바나나킥	40
쫀득초코칩	20
칙촉	12
*/

SELECT JECODE, JUSU
FROM TBL_JUMUNBACKUP;
--==>>
/*
쫀득초코칩	20
와클			10 v
꼬북칩		30 v
칙촉			12
홈런볼		50 v
바나나킥		40
눈을감자		10
포카칩		40 v
감자칩		20
칸쵸			20 v
*/
--> A MINUS B는 A에서 B와 겹치는 부분을 제거하고 남은 부분만을 출력 

/*
	A = {10, 20, 30, 40, 50}
	B = {10, 20, 30}
	
	A - B = {40, 50}
*/


SELECT D.DEPTNO, D.DNAME, E.ENAME, E.SAL
FROM EMP E JOIN DEPT D
ON E.DEPTNO = D.DEPTNO;

-- CHECK~!!!
SELECT DEPTNO, DNAME, ENAME, SAL
FROM EMP NATURAL JOIN DEPT;
--==>>
/*
DEPTNO	DNAME	ENAME	SAL
10	ACCOUNTING	CLARK	2450
10	ACCOUNTING	KING	5000
10	ACCOUNTING	MILLER	1300
20	RESEARCH	JONES	2975
20	RESEARCH	FORD	3000
20	RESEARCH	ADAMS	1100
20	RESEARCH	SMITH	800
20	RESEARCH	SCOTT	3000
30	SALES		WARD	1250
30	SALES		TURNER	1500
30	SALES		ALLEN	1600
30	SALES		JAMES	950
30	SALES		BLAKE	2850
30	SALES		MARTIN	1250
*/

SELECT DEPTNO, DNAME, ENAME, SAL
FROM EMP JOIN DEPT
USING(DEPTNO);
--==>>
/*
10	ACCOUNTING	CLARK	2450
10	ACCOUNTING	KING	5000
10	ACCOUNTING	MILLER	1300
20	RESEARCH	JONES	2975
20	RESEARCH	FORD	3000
20	RESEARCH	ADAMS	1100
20	RESEARCH	SMITH	800
20	RESEARCH	SCOTT	3000
30	SALES		WARD	1250
30	SALES		TURNER	1500
30	SALES		ALLEN	1600
30	SALES		JAMES	950
30	SALES		BLAKE	2850
30	SALES		MARTIN	1250
*/
